<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the Cultuurnet API module.
 */

/**
 * Implements hook_schema().
 */
function cnapi_schema() {
  // cache_cnapi
  $schema['cache_cnapi'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_cnapi']['description'] = 'Cache table for the CNAPI module to store parsed API requests (lists, summaries and reports), identified by an ID generated by cnapi_cache_cid based on the $request for the request.';

  // cache_cnapi_detail
  $schema['cache_cnapi_detail'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_cnapi_detail']['description'] = 'Cache table for the CNAPI module to store parsed API requests (details), identified by an ID generated by cnapi_cache_cid based on the $request for the request.';

  // output types
  $schema['cnapi_output_type'] = array(
    'description' => 'Output types for the Cultuurnet API.',
    'fields' => array(
      'tid' => array(
        'description' => 'The primary identifier for an output type.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'region_dimension' => array(
        'description' => 'Region dimension to use.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'name' => array(
        'description' => 'Output type name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('tid'),
  );

  // locations
  $schema['cnapi_location'] = array(
    'description' => 'Locations for the Cultuurnet API.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary identifier for a location.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'type' => array(
        'description' => 'Location type: region or city.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'zip' => array(
        'description' => 'Location ZIP.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE
      ),
      'name' => array(
        'description' => 'Location name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'did' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The dimension of this location.',
      ),
    ),
    'indexes' => array(
      'type' => array('type'),
      'zip' => array('zip'),
      'did' => array('did'),
    ),
    'primary key' => array('lid'),
  );

  // locations
  $schema['cnapi_location_hierarchy'] = array(
    'description' => 'Hierarchy of the locations for the Cultuurnet API.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary identifier for a location.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'pid' => array(
        'description' => 'ID of the parent location (0 if no parent).',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('lid', 'pid'),
  );

  // headings
  $schema['cnapi_heading'] = array(
    'description' => t('Headings for the Cultuurnet API.'),
    'fields' => array(
      'hid' => array(
        'description' => 'The primary identifier for a heading.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'pid' => array(
        'description' => 'ID of the parent heading (0 if no parent).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'tid' => array(
        'description' => 'Output type of the heading.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'name' => array(
        'description' => 'Heading name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this heading in relation to other headings.',
      ),
    ),
    'indexes' => array(
      'tid' => array('tid'),
      'pid' => array('pid'),
    ),
    'primary key' => array('hid'),
  );

  // dimension
  $schema['cnapi_dimension'] = array(
    'description' => 'Dimensions of categories for the Cultuurnet API.',
    'fields' => array(
      'did' => array(
        'description' => 'The primary identifier for a dimension.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'machinename' => array(
        'description' => 'Machine name of the dimension (used in API filtes).',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'name' => array(
        'description' => 'Dimension name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('did'),
  );

  // categories
  $schema['cnapi_category'] = array(
    'description' => 'Categories for the Cultuurnet API.',
    'fields' => array(
      'cid' => array(
        'description' => 'The primary identifier for a category.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'name' => array(
        'description' => 'Category name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'did' => array(
        'description' => 'Dimension of the category.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ),
    'indexes' => array(
      'did' => array('did'),
    ),
    'primary key' => array('cid'),
  );

  // heading category
  $schema['cnapi_heading_category'] = array(
    'description' => 'What categories a heading is constructed of for the Cultuurnet API.',
    'fields' => array(
      'hid' => array(
        'description' => 'The primary identifier for a heading.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'cid' => array(
        'description' => 'The primary identifier for a category.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'indexes' => array(
      'hid' => array('hid'),
      'cid' => array('cid'),
    ),
  );

  return $schema;
}

function cnapi_uninstall() {
  $variables = array(
    'cnapi_api_location',
    'cnapi_api_key',
    'cnapi_api_output_type',
    'cnapi_lib_version',
    'cnapi_proxy_enabled',
    'cnapi_proxy_server',
    'cnapi_proxy_port',
    'cnapi_proxy_username',
    'cnapi_proxy_password',
    'cnapi_defaults',
    'cnapi_defaults_events',
    'cnapi_defaults_productions',
    'cnapi_defaults_actors',
    'cnapi_cache_status',
    'cnapi_cache_lifetime',
    'cnapi_cache_lifetime_detail',
    'cnapi_cache_lifetime_production',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_requirements().
 */
function cnapi_requirements($phase) {
  $requirements = array();

  $t = get_t();

  // Verify curl is installed
  $has_curl = function_exists('curl_init');
  $requirements['curl'] = array(
    'title' => $t('cURL'),
    'value' => $has_curl ? $t('Enabled') : $t('Not found'),
  );
  if (!$has_curl) {
    $requirements['curl']['severity'] = REQUIREMENT_ERROR;
    $requirements['curl']['description'] = $t('Cultuurnet API could not be installed because the PHP <a href="@curl_url">cURL</a> library is not available.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
  }

  if ($phase == 'runtime') {
    // Raise warning if Cultuurnet API key has not been set yet.
    $requirements['cnapi_api_key']['title'] = $t('Cultuurnet API key');
    if (trim(variable_get('cnapi_api_key', '')) == '') {
      $requirements['cnapi_api_key']['description'] = $t('Your Cultuurnet API key has not been set yet. Please configure its settings from the <a href="@url">Cultuurnet API settings page</a>.', array('@url' => url('admin/config/services/cnapi')));
      $requirements['cnapi_api_key']['severity'] = REQUIREMENT_ERROR;
      $requirements['cnapi_api_key']['value'] = $t('Not configured');
    }
    else {
      $requirements['cnapi_api_key']['value'] = variable_get('cnapi_api_key', '');
    }

    // Raise warning if Cultuurnet API location has not been set yet.
    $requirements['cnapi_api_location']['title'] = $t('Cultuurnet API location');
    if (trim(variable_get('cnapi_api_location', CNAPI_API_LOCATION)) == '') {
      $requirements['cnapi_api_location']['description'] = $t('The location of the Cultuurnet API has not been set yet. Please configure its settings from the <a href="@url">Cultuurnet API settings page</a>.', array('@url' => url('admin/config/services/cnapi')));
      $requirements['cnapi_api_location']['severity'] = REQUIREMENT_ERROR;
      $requirements['cnapi_api_location']['value'] = $t('Not configured');
    }
    else {
      $requirements['cnapi_api_location']['value'] = variable_get('cnapi_api_location', CNAPI_API_LOCATION);
    }

    // Raise warning if Cultuurnet API lib version has not been set yet.
    $requirements['cnapi_lib_version']['title'] = $t('Cultuurnet API library version');
    if (trim(variable_get('cnapi_lib_version', '')) == '') {
      $requirements['cnapi_lib_version']['description'] = $t('The Cultuurnet API library version has not been set yet. Please configure its settings from the <a href="@url">Cultuurnet API settings page</a>.', array('@url' => url('admin/config/services/cnapi')));
      $requirements['cnapi_lib_version']['severity'] = REQUIREMENT_ERROR;
      $requirements['cnapi_lib_version']['value'] = $t('Not configured');
    }
    else {
      $requirements['cnapi_lib_version']['value'] = variable_get('cnapi_lib_version', '');
    }

    // Check if locations, headings, ... have been imported
    $tables = array(
      'cnapi_output_type',
      'cnapi_location',
      'cnapi_location_hierarchy',
      'cnapi_heading',
      'cnapi_dimension',
      'cnapi_category',
      'cnapi_heading_category'
    );

    $has_empty_table = FALSE;
    foreach ($tables as $table) {
      $count = db_query('SELECT COUNT(*) FROM {' . $table . '}')->fetchField();
      if (!$count) {
        $has_empty_table = TRUE;
        break;
      }
    }

    $requirements['cnapi_import']['title'] = $t('Cultuurnet API import');
    if ($has_empty_table) {
      $requirements['cnapi_import']['description'] = $t('Locations, headings, ... have not been imported yet. Use "drush cnapi-import-values to import these.');
      $requirements['cnapi_import']['severity'] = REQUIREMENT_ERROR;
      $requirements['cnapi_import']['value'] = $t('Not imported');
    }
    else {
      $requirements['cnapi_import']['value'] = $t('Imported');
    }
  }

  return $requirements;
}
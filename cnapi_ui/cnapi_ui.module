<?php

require_once('cnapi_ui.params.inc');
require_once('cnapi_ui.helpers.inc');
require_once('cnapi_ui.seo.inc');
require_once('cnapi_ui.preprocess.inc');

/**
 * Implements hook_menu().
 */
function cnapi_ui_menu() {
  $contexts = cnapi_ui_contexts();
  foreach ($contexts as $context => $info) {
    $path = $info['path'];
    $type = $info['type'];

    // Menu path for list pages.
    $items[$path] = array(
      'title callback' => 'cnapi_ui_page_list_title',
      'page callback' => 'cnapi_ui_page_list',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'cnapi_ui.pages.inc',
    );

    // Menu path for RSS.
    $items['rss/' . $path] = array(
      'title' => 'RSS',
      'page callback' => 'cnapi_ui_page_list_rss',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'cnapi_ui.pages.inc',
    );
  }

  // Menu path for detail pages.
  $items['agenda/a/%/%cnapi_ui_actor'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );
  $items['agenda/e/%/%cnapi_ui_event'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );
  $items['agenda/p/%/%cnapi_ui_production'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function cnapi_ui_init() {
  // Setting SEO canonical and noindex.
  cnapi_ui_set_canonical_and_noindex();

  // SEO redirects for details pages.
  cnapi_ui_seo_redirects();

  // CultuurNet API tracking calls in case tracking is enabled.s
  if (module_exists('cnapi_tracking')) {
    module_load_include('inc', 'cnapi_ui', 'cnapi_ui.tracking');
    cnapi_ui_tracking();
  }
}

/**
 * Implements hook_theme().
 */
function cnapi_ui_theme() {
  return array(
    'cnapi_ui_list' => array(
      'variables' => array('type' => NULL, 'items' => array(), 'total' => NULL, 'request' => array()),
      'template' => 'cnapi-ui-list',
    ),
    'cnapi_ui_actor' => array(
      'variables' => array('actor' => NULL),
      'template' => 'cnapi-ui-actor',
    ),
    'cnapi_ui_event' => array(
      'variables' => array('event' => NULL),
      'template' => 'cnapi-ui-event',
    ),
    'cnapi_ui_production' => array(
      'variables' => array('production' => NULL),
      'template' => 'cnapi-ui-production',
    ),
    'cnapi_ui_actor_summary' => array(
      'variables' => array('actor' => NULL, 'url_absolute' => FALSE),
      'template' => 'cnapi-ui-actor-summary',
    ),
    'cnapi_ui_event_summary' => array(
      'variables' => array('event' => NULL, 'url_absolute' => FALSE),
      'template' => 'cnapi-ui-event-summary',
    ),
    'cnapi_ui_production_summary' => array(
      'variables' => array('production' => NULL, 'url_absolute' => FALSE),
      'template' => 'cnapi-ui-production-summary',
    ),
    'cnapi_ui_page_list_rss' => array(
      'variables' => array('objects' => array(), 'type' => NULL),
    ),
  );
}

function cnapi_ui_contexts($key = 'id', $id = NULL) {
  $contexts = &drupal_static(__FUNCTION__, NULL);

  if (!$contexts) {
    $contexts['id'] = array(
      'event' => array(
        'id' => 'event',
        'type' => 'event',
        'query' => array('locationtype' => '!8.9.1.0.0'),
        'path' => 'agenda/search',
        'title' => 'Evenementen',
      ),
      'actor' => array(
        'id' => 'actor',
        'type' => 'actor',
        'query' => array(),
        'path' => 'agenda/ar',
        'title' => 'Locaties, organisators, ...'
      ),
      'movie' => array(
        'id' => 'movie',
        'type' => 'production',
        'query' => array('type' => '0.50.6.0.0'),
        'path' => 'agenda/film',
        'title' => 'Films',
      ),
      'movie_children' => array(
        'id' => 'movie_children',
        'type' => 'production',
        'query' => array('type' => '0.50.6.0.0', 'age' => '1..11'),
        'path' => 'agenda/film/kinderen',
        'title' => 'Film met kinderen',
      ),
    );

    drupal_alter('cnapi_ui_contexts', $contexts['id']);

    $contexts['path'] = array();

    foreach ($contexts['id'] as $context => $info) {
      $path = $info['path'];

      $contexts['path'][$path] = $info;
    }
  }

  if ($id) {
    return isset($contexts[$key][$id]) ? $contexts[$key][$id] : NULL;
  }

  return $contexts[$key];
}

function theme_cnapi_ui_page_list_rss($variables) {
  $objects = $variables['objects'];
  $type = $variables['type'];

  $items = array();
  if ($objects) {
    foreach ($objects as $object) {
      // object_url
      $request_detail = array($type => $object['cdbid'], 'title' => $object['title']);

      $object_url = cnapi_url_dp2dua($request_detail);
      $object_url['options']['absolute'] = TRUE;
      $object_url = url($object_url['path'], $object_url['options']);

      $args = array(
        array('key' => 'pubDate', 'value' => date('r', $object['created'])),
        array('key' => 'guid', 'value' => $object_url, 'attributes' => array('isPermaLink' => 'true')),
        array('key' => 'postid', 'value' => $object['cdbid']),
      );

      $body = theme('cnapi_ui_' . $type . '_summary', array($type => $object, 'url_absolute' => TRUE));
      $items .= format_rss_item($object['title'], $object_url, $body, $args);
    }
  }

  $site_name = variable_get('site_name', 'Drupal');
  $url['options']['absolute'] = TRUE;
  $url = url($url['path'], $url['options']);
  $description = 'Description of feed.';

  $output  = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<rss version=\"2.0\">\n";
  $output .= format_rss_channel(t('@site_name', array('@site_name' => $site_name)), $url, $description, $items);
  $output .= "</rss>\n";

  return $output;
}

function cnapi_ui_actor_load($cdbid) {
  return cnapi_get_actor($cdbid);
}

function cnapi_ui_event_load($cdbid) {
  return cnapi_get_event($cdbid);
}

function cnapi_ui_production_load($cdbid) {
  return cnapi_get_production($cdbid);
}

/**
 * Callback for generating page title of object.
 */
function cnapi_ui_page_detail_title($object) {
  if (isset($object['detail']['nl']['title'])) {
    return $object['detail']['nl']['title'];
  }
  elseif (isset($object['title'])) {
    return $object['title'];
  }
  
  return FALSE;
}

function cnapi_ui_page_list_title() {
  $request = cnapi_ui_get_active_request();
  
  $context = cnapi_ui_contexts('id', $request['context']);
  
  $filters = cnapi_ui_get_active_request_filters();
  
  $parts = array();
  
  foreach ($filters as $key => $key_filters) {
    foreach ($key_filters as $filter) {
      $parts[] = $filter['description'];
    }
  }
  
  $parts[] = $context['title'];
  
  $title = truncate_utf8(implode(',Â ', $parts), 80, TRUE, TRUE);
  
  if (isset($request['query']['page']) && is_numeric($request['query']['page']) && $request['query']['page'] > 0) {
    $title .= ', pagina ' . ($request['query']['page'] + 1);
  }
  
  return $title;
}

function cnapi_ui_get_active_request_filters() {
  $filters = array();

  $request = cnapi_ui_get_active_request();
  
  if (!isset($request['context'])) {
    return;
  }
  
  $query = $request['query'];
  
  $valid_keys = array('query', 'datetype', 'location', 'regio', 'heading', 'targetaudience', 'thema', 'type', 'facility', 'publicscope', 'k', 'isfree', 'permanent', 'temporary', 'age');
  
  foreach ($query as $key => $value) {
    $filter = array();
    
    if (!in_array($key, $valid_keys)) {
      continue;
    }
    
    $split = ';';
    if ($key == 'k') {
      $split = ',';
    }
    
    $values = array($query[$key]);
    if ($key != 'query') {
      $values = explode($split, $query[$key]);
    }
    
    foreach ($values as $value) {
      $tmp = array();
      $tmp['remove'] = $request;
      $new = array_diff($values, array($value));
      if (!empty($new)) {
        $tmp['remove']['query'][$key] = implode($split, $new);
      }
      else {
        unset($tmp['remove']['query'][$key]);
      }
      $tmp['value'] = $value;
      $tmp['description'] = $tmp['value'];
      
      switch ($key) {
        
        case 'datetype':
          $datetypes = cnapi_get_datetypes();
          $tmp['description'] = $datetypes[$value];
          break;
          
        case 'location':
          $actor = cnapi_get_actor($value);
          $tmp['description'] = '';
          if (isset($actor['detail']['title']['nl'])) {
            $tmp['description'] = $actor['detail']['title']['nl'];
          }
          elseif (isset($actor['title'])) {
            $tmp['description'] = $actor['title'];
          }
          break;
          
        case 'regio':
          $municipalities = cnapi_get_municipalities();
          $regions = cnapi_get_provinces() + cnapi_get_regions_administrative() + cnapi_get_regions_tourist() + $municipalities;
          $tmp['description'] = isset($regions[$value]['name']) ? $regions[$value]['name'] : '';
          if ($tmp['description'] && isset($municipalities[$value])) {
            $tmp['description'] .= ' (Regio)';
          }
          break;
          
        case 'heading':
          $headings = cnapi_get_headings();
          $tmp['description'] = isset($headings[$value]['name']) ? $headings[$value]['name'] : '';
          
          $replace = array(
            67 => 'Muziekfestivals',
            68 => 'Theaterfestivals',
            69 => 'Dansfestivals',
            70 => 'Filmfestivals',
            71 => 'Literatuurfestivals',
          );
          
          if (isset($replace[$value])) {
            $tmp['description'] = $replace[$value];
          }
          
          break;
          
        case 'targetaudience':
          $targetaudiences = cnapi_get_age_types() + cnapi_get_targetaudiences();
          $tmp['description'] = isset($targetaudiences[$value]['name']) ? $targetaudiences[$value]['name'] : '';
          break;
          
        case 'thema':
          $themes = cnapi_get_themes();
          $tmp['description'] = isset($themes[$value]['name']) ? $themes[$value]['name'] : '';
          break;
          
        case 'type':
          $types = cnapi_get_event_types();
          $tmp['description'] = isset($types[$value]['name']) ? $types[$value]['name'] : '';
          break;
          
        case 'facility':
          $facilities = cnapi_get_facilities();
          $tmp['description'] = isset($facilities[$value]['name']) ? $facilities[$value]['name'] : '';
          break;
          
        case 'publicscope':
          $publicscopes = cnapi_get_publicscopes();
          $tmp['description'] = isset($publicscopes[$value]['name']) ? $publicscopes[$value]['name'] : '';
          break;
          
        case 'isfree':
          $tmp['description'] = $value == 'true' ? 'Enkel gratis aanbod' : 'Enkel betalend aanbod';
          break;
          
        case 'permanent':
          $tmp['description'] = $value == 'true' ? 'Enkel doorlopend aanbod' : 'Enkel tijdelijk aanbod';
          break;
          
        case 'temporary':
          $tmp['description'] = $value == 'true' ? 'Enkel tijdelijk aanbod' : 'Enkel doorlopend aanbod';
          break;
          
        case 'age':
          $tmp['description'] = '';
          $parts = explode('..', $value);
          if (count($parts) == 2) {
            $tmp['description'] = sprintf('Vanaf %d tot %d jaar', $parts[0], $parts[1]);
          }
          elseif (count($parts) == 1) {
            $tmp['description'] = sprintf('Vanaf %d jaar', $parts[0]);
          }
          break;
      }
      
      if ($tmp['description']) {
        $filter[] = $tmp;
      }
    }
    
    if (!empty($filter)) {
      $filters[$key] = $filter;
    }
  }
  
  return $filters;
}
<?php

require_once('cnapi_ui.params.inc');
require_once('cnapi_ui.helpers.inc');
require_once('cnapi_ui.seo.inc');
require_once('cnapi_ui.preprocess.inc');
require_once('cnapi_ui.theme.inc');

/**
 * Implements hook_menu().
 */
function cnapi_ui_menu() {
  $contexts = cnapi_ui_contexts();
  foreach ($contexts as $context => $info) {
    $path = $info['path'];
    $type = $info['type'];

    // Menu path for list pages.
    $items[$path] = array(
      'title callback' => 'cnapi_ui_page_list_title',
      'page callback' => 'cnapi_ui_page_list',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'cnapi_ui.pages.inc',
    );

    // Menu path for RSS.
    $items['rss/' . $path] = array(
      'title' => 'RSS',
      'page callback' => 'cnapi_ui_page_list_rss',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'cnapi_ui.pages.inc',
    );
  }

  // Menu path for detail pages.
  $items['agenda/a/%/%cnapi_ui_actor'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );
  $items['agenda/e/%/%cnapi_ui_event'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );
  $items['agenda/p/%/%cnapi_ui_production'] = array(
    'title callback' => 'cnapi_ui_page_detail_title',
    'title arguments' => array(3),
    'page callback' => 'cnapi_ui_page_detail',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cnapi_ui.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function cnapi_ui_init() {
  // Setting SEO canonical and noindex.
  cnapi_ui_set_canonical_and_noindex();

  // SEO redirects for details pages.
  cnapi_ui_seo_redirects();

  // CultuurNet API tracking calls in case tracking is enabled.s
  if (module_exists('cnapi_tracking')) {
    module_load_include('inc', 'cnapi_ui', 'cnapi_ui.tracking');
    cnapi_ui_tracking();
  }
}

/**
 * Implements hook_theme().
 */
function cnapi_ui_theme() {
  return array(
    'cnapi_ui_list' => array(
      'variables' => array('type' => NULL, 'items' => array(), 'total' => NULL, 'request' => array()),
      'template' => 'cnapi-ui-list',
    ),
    'cnapi_ui_actor' => array(
      'variables' => array('actor' => NULL),
      'template' => 'cnapi-ui-actor',
    ),
    'cnapi_ui_event' => array(
      'variables' => array('event' => NULL),
      'template' => 'cnapi-ui-event',
    ),
    'cnapi_ui_production' => array(
      'variables' => array('production' => NULL),
      'template' => 'cnapi-ui-production',
    ),
    'cnapi_ui_actor_mini_summary' => array(
      'variables' => array('actor' => NULL, 'url_absolute' => FALSE, 'heading_level' => 3),
      'template' => 'cnapi-ui-actor-mini-summary',
    ),
    'cnapi_ui_actor_summary' => array(
      'variables' => array('actor' => NULL, 'url_absolute' => FALSE, 'heading_level' => 2),
      'template' => 'cnapi-ui-actor-summary',
    ),
    'cnapi_ui_event_mini_summary' => array(
      'variables' => array('event' => NULL, 'url_absolute' => FALSE, 'heading_level' => 3),
      'template' => 'cnapi-ui-event-mini-summary',
    ),
    'cnapi_ui_event_summary' => array(
      'variables' => array('event' => NULL, 'url_absolute' => FALSE, 'heading_level' => 2),
      'template' => 'cnapi-ui-event-summary',
    ),
    'cnapi_ui_production_summary' => array(
      'variables' => array('production' => NULL, 'url_absolute' => FALSE, 'heading_level' => 2),
      'template' => 'cnapi-ui-production-summary',
    ),
    'cnapi_ui_page_list_rss' => array(
      'variables' => array('objects' => array(), 'type' => NULL),
    ),
  );
}

/**
 * Load function for an actor. Return an actor object as it is returned and parsed from the API.
 */
function cnapi_ui_actor_load($cdbid) {
  if ($cdbid == 'untitled') {
    return FALSE;
  }
  
  return cnapi_get_actor($cdbid);
}

/**
 * Load function for an event. Return an event object as it is returned and parsed from the API.
 */
function cnapi_ui_event_load($cdbid) {
  if ($cdbid == 'untitled') {
    return FALSE;
  }
  
  return cnapi_get_event($cdbid);
}

/**
 * Load function for a production. Return a production object as it is returned and parsed from the API.
 */
function cnapi_ui_production_load($cdbid) {
  if ($cdbid == 'untitled') {
    return FALSE;
  }
  
  return cnapi_get_production($cdbid);
}

/**
 * Callback for generating page title of object.
 */
function cnapi_ui_page_detail_title($object) {
  // The title of an object is either in 'detail/nl/title'...
  if (isset($object['detail']['nl']['title'])) {
    return $object['detail']['nl']['title'];
  }
  // ... or in 'title'.
  elseif (isset($object['title'])) {
    return $object['title'];
  }

  // Return FALSE if we couldn't find the title.
  return FALSE;
}

/**
 * Callback for generating page title of a context (list) page.
 */
function cnapi_ui_page_list_title() {
  // Get the active request
  $request = cnapi_ui_get_active_request();

  // Get full info on the current context.
  $context = cnapi_ui_contexts('id', $request['context']);

  // Get full info (description, remove link, ...) on the current filters.
  $filters = cnapi_ui_get_active_request_filters();

  // Loop over all filters and gather all descriptions in an array.
  $parts = array();

  foreach ($filters as $key => $key_filters) {
    foreach ($key_filters as $filter) {
      $parts[] = $filter['description'];
    }
  }

  // Add the context title to the array.
  $parts[] = $context['title'];

  // The first part of title of the overview page is generated by imploding and truncating the part array.
  $title = truncate_utf8(implode(',Â ', $parts), 80, TRUE, TRUE);

  // If we're not on the first page of results, we add the page number to the title too for SEO reasons.
  if (isset($request['query']['page']) && is_numeric($request['query']['page']) && $request['query']['page'] > 0) {
    $title .= ', pagina ' . ($request['query']['page'] + 1);
  }

  // Return the title.
  return $title;
}

/**
 * Get a list of defined UI contexts. A UI context is a themed overview page of a certain type (actor, event, production), sitting on a certain Drupal path (like ?q=agenda/search).
 * The power of UI contexts are the predefined queries. You can create an overview page of events, filtered by a certain heading or city (or whatever other parameter). That query parameter won't be visually transparent in the URL (or anywhere else). Another example: if you filter the list with another paramter, that one is combined with the context query parameters.
 *
 * This module defines a few predefined contexts that are often used, but provides other modules the possibility to alter this list (add or remove) using hook_cnapi_ui_contexts_alter.
 *
 * A context is defined by:
 * - an ID (for internal usage)
 * - a type (actor, event, production)
 * - the query (for the API request)
 * - a Drupal path (think of this as in hook_menu)
 * -  page title
 *
 * @param $key
 *   The index field for the associative array of contexts that is returned. This can be 'id' or 'path'.
 *   In case of a context lookup (if the second parameter $id is defined), this defines the type of that second parameter.
 * @param $id
 *   This identifier (id or path depending on $key) of the context to lookup. If $id is NULL, all contexts are returned, indexed by the field defined in $key.
 *
 * @return
 *   The associative array of contexts indexed by the field defined in $key.
 */
function cnapi_ui_contexts($key = 'id', $id = NULL) {
  $contexts = &drupal_static(__FUNCTION__, NULL);

  if (!$contexts) {
    // Initiate with our default contexts.
    $contexts['id'] = array(
      'event' => array(
        'id' => 'event',
        'type' => 'event',
        'query' => array('locationtype' => '!8.9.1.0.0'),
        'path' => 'agenda/search',
        'title' => 'Evenementen',
      ),
      'actor' => array(
        'id' => 'actor',
        'type' => 'actor',
        'query' => array(),
        'path' => 'agenda/ar',
        'title' => 'Locaties, organisators, ...'
      ),
      'movie' => array(
        'id' => 'movie',
        'type' => 'production',
        'query' => array('type' => '0.50.6.0.0'),
        'path' => 'agenda/film',
        'title' => 'Films',
      ),
      'movie_children' => array(
        'id' => 'movie_children',
        'type' => 'production',
        'query' => array('type' => '0.50.6.0.0', 'age' => '1..11'),
        'path' => 'agenda/film/kinderen',
        'title' => 'Film met kinderen',
      ),
    );

    // Allow other modules to alter the list of contexts.
    drupal_alter('cnapi_ui_contexts', $contexts['id']);

    // Our initialized list of contexts is keyed by the context ID. in $contexts['path'] we convert this to one indexed by context path.
    $contexts['path'] = array();

    foreach ($contexts['id'] as $context => $info) {
      $path = $info['path'];

      $contexts['path'][$path] = $info;
    }
  }

  // If a $id was defined, look it up.
  if ($id !== NULL) {
    return isset($contexts[$key][$id]) ? $contexts[$key][$id] : NULL;
  }

  // Return the result.
  return $contexts[$key];
}

function cnapi_ui_get_active_request_filters() {
  $request = cnapi_ui_get_active_request();
  
  return cnapi_ui_get_request_filters($request);
}

function cnapi_ui_get_request_filters($request) {
  $filters = array();

  // We only act upon list pages.
  if (!isset($request['context'])) {
    return;
  }

  $query = $request['query'];

  // The "date" filter is a special case. If multiple dates have been specified, we only take the first and last and put a hypen between them for the description.
  if (isset($query['date'])) {
    // Splitting all dates from the query.
    $dates = explode(';', $query['date']);

    // Converting all of the to timestamps.
    foreach ($dates as $i => $date) {
      $date = explode('-', $date);
      $dates[$i] = strtotime($date[0] . '-' . $date[1] . '-' . $date[2]);
    }

    // Sorting them...
    sort($dates);

    // ... to get the first ...
    if (count($dates) > 0) {
      $filter['description'] = format_date($dates[0], 'custom', 'd/m/Y');
    }
    
    // ... and last ...
    if (count($dates) > 1) {
      $filter['description'] .= ' - ' . format_date($dates[count($dates) - 1], 'custom', 'd/m/Y');
    }

    // The remove url is generated by taking the active request and removing the date filter completely.
    $filter['value'] = $query['date'];
    $filter['url_remove'] = $request;
    unset($filter['url_remove']['query']['date']);

    if ($filter['description']) {
      $filters['date'][] = $filter;
    }
  }

  // For all other keys, we take a standard approach. We list all keys we know that will work in $valid_keys.
  $valid_keys = array('city', 'zip', 'cityid', 'query', 'datetype', 'location', 'regio', 'heading', 'targetaudience', 'thema', 'type', 'facility', 'publicscope', 'k', 'isfree', 'permanent', 'temporary', 'age');

  // Looping over all query keys.
  foreach ($query as $key => $value) {
    $filter = array();

    // If this is not a valid key, skip it.
    if (!in_array($key, $valid_keys)) {
      continue;
    }

    // Split multivalue queries. In case of a keyword (k), multivalue queries are concatenated by a ','. In case of a "query", we don't split.
    $split = ';';
    if ($key == 'k') {
      $split = ',';
    }

    $values = array($query[$key]);
    if ($key != 'query') {
      $values = explode($split, $query[$key]);
    }

    // Loop over each query value individually and generate a description, id, value, remove url for it.
    foreach ($values as $value) {
      // The remove url is the url of the active request with the value (only this value) for the current query removed. If multiple values exist for a filter, the other ones stay active in the remove url.
      $tmp = array();
      $tmp['url_remove'] = $request;
      unset($tmp['url_remove']['query']['page']);
      $new = array_diff($values, array($value));
      if (!empty($new)) {
        $tmp['url_remove']['query'][$key] = implode($split, $new);
      }
      else {
        unset($tmp['url_remove']['query'][$key]);
      }
      
      // By default the value equals the value...
      $tmp['value'] = $value;
      
      // ... and the description also equals the value.
      $tmp['description'] = $tmp['value'];

      // Here we manage the special cases where the description doesn't equal the value but needs to be looked up (key-value wise).
      switch ($key) {
        case 'city':
        case 'cityid':
        case 'zip':
          $parts = explode('!', $value);

          $value = $query[$key];
          $tmp['description'] = $parts[0];

          if ($key == 'cityid') {
            $cities = cnapi_get_cities();
            $id = $parts[0];
            if (isset($cities[$id])) {
              $tmp['description'] = $cities[$id]['name'];
            }
          }

          if (isset($parts[1])) {
            $tmp['description'] .= ' (+ ' . $parts[1] . ')';
          }
          break;

        case 'datetype':
          $datetypes = cnapi_get_datetypes();
          $tmp['description'] = $datetypes[$value];
          break;

        case 'location':
          $actor = cnapi_get_actor($value);
          $tmp['description'] = '';
          if (isset($actor['detail']['title']['nl'])) {
            $tmp['description'] = $actor['detail']['title']['nl'];
          }
          elseif (isset($actor['title'])) {
            $tmp['description'] = $actor['title'];
          }
          break;

        case 'regio':
          $municipalities = cnapi_get_municipalities();
          $regions = cnapi_get_provinces() + cnapi_get_regions_administrative() + cnapi_get_regions_tourist() + $municipalities;
          $tmp['description'] = isset($regions[$value]['name']) ? $regions[$value]['name'] : '';
          if ($tmp['description'] && isset($municipalities[$value])) {
            $tmp['description'] .= ' (Regio)';
          }
          break;

        case 'heading':
          $headings = cnapi_get_headings();
          $tmp['description'] = isset($headings[$value]['name']) ? $headings[$value]['name'] : '';
          
          // For the festivals the name of the heading is just Music and the keyword "festival" is in the parent. But since the description will be shown without the parent, we rewrite the heading to the full name (including festival) so it makes sense in that context.
          $replace = array(
            67 => 'Muziekfestivals',
            68 => 'Theaterfestivals',
            69 => 'Dansfestivals',
            70 => 'Filmfestivals',
            71 => 'Literatuurfestivals',
          );

          if (isset($replace[$value])) {
            $tmp['description'] = $replace[$value];
          }

          break;

        case 'targetaudience':
          $targetaudiences = cnapi_get_age_types() + cnapi_get_targetaudiences();
          $tmp['description'] = isset($targetaudiences[$value]['name']) ? $targetaudiences[$value]['name'] : '';
          break;

        case 'thema':
          $themes = cnapi_get_themes();
          $tmp['description'] = isset($themes[$value]['name']) ? $themes[$value]['name'] : '';
          break;

        case 'type':
          $types = cnapi_get_event_types();
          $tmp['description'] = isset($types[$value]['name']) ? $types[$value]['name'] : '';
          break;

        case 'facility':
          $facilities = cnapi_get_facilities();
          $tmp['description'] = isset($facilities[$value]['name']) ? $facilities[$value]['name'] : '';
          break;

        case 'publicscope':
          $publicscopes = cnapi_get_publicscopes();
          $tmp['description'] = isset($publicscopes[$value]['name']) ? $publicscopes[$value]['name'] : '';
          break;

        case 'isfree':
          $tmp['description'] = $value == 'true' ? 'Enkel gratis aanbod' : 'Enkel betalend aanbod';
          break;

        case 'permanent':
          $tmp['description'] = $value == 'true' ? 'Enkel doorlopend aanbod' : 'Enkel tijdelijk aanbod';
          break;

        case 'temporary':
          $tmp['description'] = $value == 'true' ? 'Enkel tijdelijk aanbod' : 'Enkel doorlopend aanbod';
          break;

        case 'age':
          $tmp['description'] = '';
          $parts = explode('..', $value);
          if (count($parts) == 2) {
            $tmp['description'] = sprintf('Vanaf %d tot %d jaar', $parts[0], $parts[1]);
          }
          elseif (count($parts) == 1) {
            $tmp['description'] = sprintf('Vanaf %d jaar', $parts[0]);
          }
          break;
      }

      if ($tmp['description']) {
        $filter[] = $tmp;
      }
    }

    if (!empty($filter)) {
      $filters[$key] = $filter;
    }
  }

  // Give other modules a chance to alter the filters.
  drupal_alter('cnapi_ui_request_filters', $filters);

  return $filters;
}
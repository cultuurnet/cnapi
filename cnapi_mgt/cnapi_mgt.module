<?php

/**
 * Implements hook_menu().
 */
function cnapi_mgt_form_cnapi_admin_settings_alter(&$form, $form_state) {
  $form['settings']['cnapi_mgt_user'] = array(
    '#type' => 'textfield',
    '#title' => t('API Username'),
    '#description' => t('Your CultuurNet API username.'),
    '#default_value' => variable_get('cnapi_mgt_user', ''),
  );
  $form['settings']['cnapi_mgt_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API Password'),
    '#description' => t('Your CultuurNet API password.'),
    '#default_value' => variable_get('cnapi_mgt_password', ''),
  );
}

/**
 * Create or modify a certain userpool.
 *
 * @param $userpool
 *   The userpool to create or modify.
 *
 *   Following is an example of how a userpool should be formatted. This format is also used in the result of cnapi_mgt_get_userpools.
 *
 *     $pool = array(
 *       'userpoolkey' => '31ac4fab-13cd-4a42-9bf9-b238744452fb',
 *       'name' => 'The name of the pool',
 *       'domain' => array('www.somedomain.com', 'www.someotherdomain.net'),
 *       'type' => 1,
 *       'filters' => array(
 *         'categories' => array('include' => array('1.0.0.0.0'), 'exclude' => array('1.1.0.0.0')),
 *         'keywords' => array('include' => array('do include'), 'exclude' => array('do exclude')),
 *       ),
 *     );
 *
 * @return
 *   If the request was successfull, the userpoolkey of the resulting pool is returned in case of a creation, TRUE in case of a modification. In case of an error, FALSE is returned.
 */
function cnapi_mgt_edit_userpool($userpool) {
  // if a userpoolkey is specified, the request is a "modify", else a "create"
  if (isset($userpool['userpoolkey'])) {
    $path = 'userpool/modify';
  }
  else {
    $path = 'userpool/new';
  }

  // convert the userpool array to a url query part array that can be used in http_build_query
  $query = _cnapi_mgt_prepare_userpool_query($userpool);

  // do the request
  $result = _cnapi_mgt_request($path, $query);

  // if the result was TRUE, return it
  if ($result === TRUE) {
    return TRUE;
  }

  // if a key is in the response, the request was successfull, so return the key as result
  if ($result) {
    return $result;
  }

  $message = 'Generic error';

  $error = cnapi_get_last_request_error();

  if ($error) {
    $message = $error['message'];
  }
  elseif (isset($result['message'])) {
    $message = $result['message'];
  }

  // if no key was found in the response, we're logging an error
  watchdog('cnapi_mgt', 'Failed creating userpool !pool with message !message.', array('!pool' => serialize($userpool), '!message' => $message), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Get a list of userpools. Results are paged.
 *
 * @param $page
 *   The page to return.
 * @param $pagelength
 *   The number of pools to return for this page. Use $page to indicate what page needs to be returned.
 *
 * @return
 *   An array of userpools. For the format of each userpool, @see cnapi_mgt_edit_userpool.
 */
function cnapi_mgt_get_userpools($page = 1, $pagelength = 100) {
  // set the path part of the url of the api request
  $path = 'userpools/xmlview';

  // set the query part of the url of the api request
  $query['page'] = $page;
  $query['pagelength'] = $pagelength;

  // do the request
  return _cnapi_mgt_request($path, $query);
}

/**
 * Get a list of userpools. Results are paged.
 *
 * @param $userpool
 *   The userpool to re-format. For the format, @see cnapi_mgt_edit_userpool.
 *
 * @return
 *   The userpool re-formatted to a url query part array that can be used in http_build_query.
 */
function _cnapi_mgt_prepare_userpool_query($userpool) {
  // domains (convert array to ;-joined string)
  if (isset($userpool['domain'])) {
    $userpool['domain'] = implode(';', $userpool['domain']);
  }

  // geofilters (merge cities and regions in ;-joined geofilters string)
  $geofilters = array();
  if (isset($userpool['filters']['cities'])) {
    $geofilters = array_merge($geofilters, $userpool['filters']['cities']);
    unset($userpool['filters']['cities']);
  }
  if (isset($userpool['filters']['regions'])) {
    $geofilters = array_merge($geofilters, $userpool['filters']['regions']);
    unset($userpool['filters']['regions']);
  }

  $userpool['geofilters'] = implode(';', $geofilters);

  // other filters having include/exclude part (onvert array to ;-joined string, excludes should be prefixed with !)
  $mapping = array(
    'keywords' => 'keywordfilters',
    'locations' => 'locationfilters',
    'categories' => 'categoryfilters',
  );

  foreach ($mapping as $local_key => $url_key) {
    $filters = array();
    if (isset($userpool['filters'][$local_key])) {
      if (isset($userpool['filters'][$local_key]['include'])) {
        $filters += $userpool['filters'][$local_key]['include'];
      }
      if (isset($userpool['filters'][$local_key]['exclude'])) {
        foreach ($userpool['filters'][$local_key]['exclude'] as $keyword) {
          $filters[] = '!' . $keyword;
        }
      }
      unset($userpool['filters'][$local_key]);
    }

    $userpool[$url_key] = implode(';', $filters);
  }

  // remove (now) redundant filters part
  unset($userpool['filters']);

  return $userpool;
}

function _cnapi_mgt_parse($path, $xml) {
  $data = array();

  // we don't care for namespaces here
  $xml = str_replace(' xmlns=', ' ns=', $xml);

  // trying to parse the xml
  try {
    $xml = new SimpleXMLElement($xml);

    // parsing userpools
    if ($path == 'userpools/xmlview') {
      $data['total'] = _cnapi_xpath_str($xml, 'nofrecords');

      $xml_items = $xml->xpath('/cdbxml/userpools/userpool');
      foreach ($xml_items as $xml_item) {
        $object = array();
        _cnapi_parse_userpool(&$object, $xml_item);

        $data['data'][] = $object;
      }
    }

    // parsing userpool creation results
    elseif ($path == 'userpool/new') {
      $data = _cnapi_xpath_str($xml, '/cdbxml/response/userpoolkey');
    }

    // parsing userpool modification results
    elseif ($path == 'userpool/modify') {
      $data = TRUE;
    }
  }
  catch (Exception $e) {
    watchdog('cnapi_mgt', 'Could not parse request result for request !request.', array('!request' => serialize($request)), WATCHDOG_ERROR);
    return FALSE;
  }

  return $data;
}

function _cnapi_parse_userpool(&$data, $xml) {
  // $data['id']
  _cnapi_parse_str($data, 'id', $xml, '@id');

  // $data['title']
  _cnapi_parse_str($data, 'title', $xml, '@title');

  // $data['key']
  _cnapi_parse_str($data, 'key', $xml, '@key');

  // $data['type']
  _cnapi_parse_str($data, 'type', $xml, '@type');

  // $data['domains']
  _cnapi_parse_str($data, 'domains', $xml, 'domains/domain', TRUE);

  // $data['filters']
  $filters = array();

  // $filters['categories']
  $categories = array();
  _cnapi_parse_str($categories, 'include', $xml, 'filters/categories/categorie[@type="include"]', TRUE);
  _cnapi_parse_str($categories, 'exclude', $xml, 'filters/categories/categorie[@type="exclude"]', TRUE);
  if (!empty($categories)) {
    $filters['categories'] = $categories;
  }

  // $filters['keywords']
  $keywords = array();
  _cnapi_parse_str($keywords, 'include', $xml, 'filters/keywords/keyword[@type="include"]', TRUE);
  _cnapi_parse_str($keywords, 'exclude', $xml, 'filters/keywords/keyword[@type="exclude"]', TRUE);
  if (!empty($keywords)) {
    $filters['keywords'] = $keywords;
  }

  // $filters['locations']
  $locations = array();
  _cnapi_parse_str($locations, 'include', $xml, 'filters/locations/location[@type="include"]', TRUE);
  _cnapi_parse_str($locations, 'exclude', $xml, 'filters/locations/location[@type="exclude"]', TRUE);
  if (!empty($locations)) {
    $filters['locations'] = $locations;
  }

  // $filters['cities']
  _cnapi_parse_str($filters, 'cities', $xml, 'filters/cities/city', TRUE);

  // $filters['regions']
  _cnapi_parse_str($filters, 'regions', $xml, 'filters/regions/regio', TRUE);

  // adding filters if there are any
  if (!empty($filters)) {
    $data['filters'] = $filters;
  }
}

/**
 * Do an API request. API key, API username and API password are automatically added to the request and should not be specified.
 *
 * @param $path
 *   The path part of the API url (without /api/). Examples are userpools/xmlview, userpool/modify, ...
 *
 * @return
 *   The parsed result in case of success. FALSE in caise of failure.
 */
function _cnapi_mgt_request($path, $query = array()) {
  // add key, username and password
  $query['key'] = trim(variable_get('cnapi_api_key', ''));
  $query['user'] = trim(variable_get('cnapi_mgt_user', ''));
  $query['password'] = trim(variable_get('cnapi_mgt_password', ''));

  // construct the full api call url
  $url = rtrim(variable_get('cnapi_api_location', CNAPI_API_LOCATION), '/') . '/api/' . $path . '?' . http_build_query($query);

  // do the request
  $result = cnapi_http_request($url);

  // in case of success, parse the result, else log an error and return FALSE
  if ($result) {
    return _cnapi_mgt_parse($path, $result);
  }
  else {
    watchdog('cnapi_mgt', 'Failed doing request !path with query !query.', array('!path' => $path, '!query' => serialize($query)), WATCHDOG_ERROR);
    return FALSE;
  }
}
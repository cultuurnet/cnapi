<?php

require_once 'cnapi_snode.helpers.inc';
require_once 'cnapi_snode.rewrite.inc';

/**
 * Implements hook_menu_alter().
 */
function cnapi_snode_menu_alter(&$callbacks) {
  // We don't want people to add new nodes manually.
  $callbacks['node/add/cnapi-actor']['access callback'] = FALSE;
  unset($callbacks['node/add/cnapi-actor']['access arguments']);

  $callbacks['node/add/cnapi-event']['access callback'] = FALSE;
  unset($callbacks['node/add/cnapi-event']['access arguments']);

  $callbacks['node/add/cnapi-production']['access callback'] = FALSE;
  unset($callbacks['node/add/cnpai-production']['access arguments']);
}

/**
 * Implements hook_node_info().
 */
function cnapi_snode_node_info() {
  return array(
    'cnapi_actor' => array(
      'name' => t('CultuurNet API actor'),
      'base' => 'cnapi_snode',
      'description' => t('Holds shadow nodes for a <em>CultuurNet API actor</em>.'),
      'title_label' => t('Name'),
    ),
    'cnapi_event' => array(
      'name' => t('CultuurNet API event'),
      'base' => 'cnapi_snode',
      'description' => t('Holds shadow nodes for a <em>CultuurNet API event</em>.'),
      'title_label' => t('Name'),
    ),
    'cnapi_production' => array(
      'name' => t('CultuurNet API production'),
      'base' => 'cnapi_snode',
      'description' => t('Holds shadow nodes for a <em>CultuurNet API production</em>.'),
      'title_label' => t('Name'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function cnapi_snode_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_insert().
 */
function cnapi_snode_insert($node) {
  db_insert('cnapi_snode')
    ->fields(array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'id' => $node->id,
      'data' => serialize($node->data),
    ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function cnapi_snode_update($node) {
  if (isset($node->revision)) {
    cnapi_snode_insert($node);
  }
  else {
    db_update('cnapi_snode')
      ->fields(array(
        'id' => $node->id,
        'data' => serialize($node->data),
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }
}

/**
 * Implements hook_delete().
 */
function cnapi_snode_delete(&$node) {
  db_delete('cnapi_snode')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function cnapi_snode_load($nodes) {
  $vids = array();
  foreach ($nodes as $node) {
    $vids[] = $node->vid;
  }
  $result = db_select('cnapi_snode', 'cn')
    ->fields('cn', array(
      'nid',
      'vid',
      'id',
      'data',
    ))
    ->where('vid IN (:vids)', array(':vids' => $vids))
    ->execute();
  foreach ($result as $record) {
    $nodes[$record->nid]->id = $record->id;
    $nodes[$record->nid]->data = unserialize($record->data);
  }
}

/**
 * Implements hook_view().
 */
function cnapi_snode_view($node, $view_mode) {
  $content = array();

  if ($view_mode == 'full' && node_is_page($node)) {

    $type = cnapi_snode_short_type_name($node->type);
    $cdbid = $node->id;

    $request = array('action' => 'detail', 'type' => $type, 'query' => array('cdbid' => $cdbid));
    $result = cnapi_get($request);

    $node->content['cnapi_ui_' . $type]  = array(
      '#theme' => 'cnapi_ui_' . $type,
      '#' . $type => $result,
    );
  }

  return $node;
}